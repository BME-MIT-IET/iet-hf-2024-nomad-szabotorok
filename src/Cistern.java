//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Sivatagi vizhalozat
//  @ File Name : Cistern.java
//  @ Date : 14/04/2023
//  
//
//


import java.util.Random;

/**
 * A ciszterna aktív elem a csőhálózat végén
 * folyik bele a víz a hozzá csatlakozó csövekből
 * léterehoz egy csövet vagy pumpát ha letelik 2 kör
 */
public class Cistern extends SystemPart {
	protected static int idNum = 0;
	private Pump pump;
	private Pipe pipe = null;
	private boolean hasPipe = false;
	private int pCount = 0;
	private int timeLeft = 2;

	/**
	 * Konstruktor, ami beállítja az id-t az osztály nevére és egy eltérő számra
	 */
	public Cistern() {
		id = "cistern " + idNum++;
	}

	/**
	 * Létrehoz egy új csövet, amit beállít a saját szomszégjának
	 * A csőnek mindkét szomszégjának magát állítja be,
	 * hogy ne legyen szabad és ne folyon ki belőle a víz
	 */
	public void CreatePipe() {
		Pipe p = new Pipe();
		Control.AddPipe(p);
		p.AddNeighbour(this);
		p.AddNeighbour(this);
		AddNeighbour(p);
		AddNeighbour(p);
		pipe = p;
		hasPipe = true;
		pCount++;
	}

	/**
	 * Létrehoz egy új pumpát és eltárolja azt a tagváltozójába
	 */
	public void CreatePump() {
		pump = new Pump();
		Control.AddPump(pump);
	}

	/**
	 * A tagváltozóban eltárolt pumpa felvétele
	 * @return visszadjuk a pumpát
	 */
	@Override
	public Pump CarryPump() {

		Pump p = pump;
		pump = null;
		timeLeft = 2;
		return p;
	}

	/**
	 * A hozzákapcsolódó csövekből kiszívja vizet
	 * és a befolyó vízmenyiséget hozzáadja a szerelők pontjaihoz
	 * @return visszadja hogy mennyi vizet gyűjtött össze
	 */
	@Override
	public int PullWater() {

		int points = 0;
		for (SystemPart pipe: neighbours) {
			points += pipe.getWater();
			pipe.setWater(0);
		}
		return points;
	}

	/**
	 * A control minden körben meghívja,
	 * ha letelik az idő akkor generál egy pumpát vagy csövet
	 */
	public void Generate() {
		Random rand = new Random();
		int coin = rand.nextInt(2);

		if (--timeLeft == 0) {
			if (coin ==  1 ) {
				CreatePump();
			}
			else {
				CreatePipe();
			}
			timeLeft = 2;
		}
	}

	/**
	 *
	 * @return Keletkezett-e a ciszternán pumpa
	 */
	boolean hasPump() {
		return pump != null;
	}

	public Pipe getPipe(){
		return pipe;
	}

	public boolean hasP(){
		if (hasPipe) {
			hasPipe = false;
			return true;
		}
		return false;
	}

	public int getpCount(){
		return pCount;
	}
}
